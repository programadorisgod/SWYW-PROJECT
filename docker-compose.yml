services:
  database_auth:
    image: postgres:13.22-trixie
    container_name: swyw-database-auth
    environment:
      DB_USER_DEFAULT: ${DB_USER_DEFAULT}
      DB_USER: ${DB_USER}
      DB_NAME_AUTH: ${DB_NAME_AUTH}
      DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
      DB_APP_USER_PASSWORD: ${DB_APP_USER_PASSWORD}
      DB_NAME_DEFAULT: ${DB_NAME_DEFAULT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
      # Montar los archivos para  para inicializar la base de datos con users, roles y esquemas
      - ./SQL/auth/:/docker-entrypoint-initdb.d/
    networks:
      - swyw

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME_DEFAULT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  database_events:
    image: postgres:13.22-trixie
    container_name: swyw-database-events
    environment:
      POSTGRES_USER: ${DB_USER_DEFAULT}
      DB_USER: ${DB_USER}
      DB_NAME_DEFAULT: ${DB_NAME_DEFAULT}
      DB_NAME_EVENTS: ${DB_NAME_EVENTS}
      DB_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
      DB_APP_USER_PASSWORD: ${DB_APP_USER_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5433"
    volumes:
      - postgres_events_data:/var/lib/postgresql/data
      # Montar los archivos para  para inicializar la base de datos con users, roles y esquemas
      - ./SQL/events/:/docker-entrypoint-initdb.d/
    networks:
      - swyw

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME_EVENTS}"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Microservicio de Autenticacion
  auth-service:
    build:
      context: ./SWYW-AUTH
      dockerfile: Dockerfile
    container_name: swyw-auth
    environment:
      DB_HOST_AUTH: database_auth
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_APP_USER_PASSWORD: ${DB_APP_USER_PASSWORD}
      DB_NAME_AUTH: ${DB_NAME_AUTH}
    ports:
      - "4000:4000"

    networks:
      - swyw
    depends_on:
      database_auth:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "wget --spider -q http://localhost:4000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Microservicio de eventos
  event-service:
    build:
      context: ./SWYW-BACKEND
      dockerfile: Dockerfile
    container_name: swyw-backend
    environment:
      PORT: ${PORT}
      TYPE_DATABASE: ${TYPE_DATABASE}
      GEMINI_API_KEYI: ${GEMINI_API_KEYI}
      ENV_MODEL_AI: ${ENV_MODEL_AI}
      DB_HOST_EVENTS: database_events
      DB_PORT_2: ${DB_PORT_2}
      DB_USER: ${DB_USER}
      DB_APP_USER_PASSWORD: ${DB_APP_USER_PASSWORD}
      DB_NAME_EVENTS: ${DB_NAME_EVENTS}

    ports:
      - "3002:3000"
    networks:
      - swyw
    depends_on:
      database_events:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "wget --spider -q http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Frontend

  frontend:
    build:
      context: ./SWYW-FRONTEND
      dockerfile: Dockerfile
      args:
        VITE_API_AUTH: ${VITE_API_AUTH}
        VITE_API_NOTES: ${VITE_API_NOTES}
    container_name: swyw-frontend
    ports:
      - "8080:80"
    networks:
      - swyw
    depends_on:
      auth-service:
        condition: service_healthy
      event-service:
        condition: service_healthy

#Network
networks:
  swyw:
    driver: bridge
    name: swyw

volumes:
  postgres_auth_data:
    driver: local
  postgres_events_data:
    driver: local
